name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        cc: [ gcc, clang ]
        include:
          - os: windows-latest
            cc: msvc

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:

    - if: ${{ matrix.cc == 'gcc'}}
      env: 
        cmake_option: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

    - if: ${{ matrix.cc == 'clang'}}
      env: 
        cmake_option: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - if: ${{ matrix.cc == 'msvc'}}
      env: 
        cmake_option: 

    - uses: actions/checkout@v3
      # with:
      #   fetch-depth: 1
      #   submodules: recursive

    - name: Checkout Submodules
      run: |
        git config --global http.postBuffer 100M
        git submodule update --init --recursive --recommend-shallow --depth 1

#######################################

    - name: Configure CMake training/01_Task_Creation/1_xTaskCreateStatic
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/training/01_Task_Creation/1_xTaskCreateStatic/build -S ${{github.workspace}}/training/01_Task_Creation/1_xTaskCreateStatic -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.cmake_option}} 

    - name: Build training/01_Task_Creation/1_xTaskCreateStatic
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/training/01_Task_Creation/1_xTaskCreateStatic/build --config ${{env.BUILD_TYPE}}

    - name: Test training/01_Task_Creation/1_xTaskCreateStatic
      working-directory: ${{github.workspace}}/training/01_Task_Creation/1_xTaskCreateStatic/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -V --timeout 60

#######################################

    - name: Configure CMake training/01_Task_Creation/2_xTaskCreate
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/training/01_Task_Creation/2_xTaskCreate/build -S ${{github.workspace}}/training/01_Task_Creation/2_xTaskCreate -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build training/01_Task_Creation/2_xTaskCreate
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/training/01_Task_Creation/2_xTaskCreate/build --config ${{env.BUILD_TYPE}}

    - name: Test training/01_Task_Creation/2_xTaskCreate
      working-directory: ${{github.workspace}}/training/01_Task_Creation/2_xTaskCreate/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -V --timeout 60

#######################################

    - name: Configure CMake training/02_Task_Control/1_vTaskDelay
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/training/02_Task_Control/1_vTaskDelay/build -S ${{github.workspace}}/training/02_Task_Control/1_vTaskDelay -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build training/02_Task_Control/1_vTaskDelay
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/training/02_Task_Control/1_vTaskDelay/build --config ${{env.BUILD_TYPE}}

    - name: Test training/02_Task_Control/1_vTaskDelay
      working-directory: ${{github.workspace}}/training/02_Task_Control/1_vTaskDelay/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -V --timeout 60

#######################################

    - name: Configure training/CMake 02_Task_Control/2_vTaskDelayUntil
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/training/02_Task_Control/2_vTaskDelayUntil/build -S ${{github.workspace}}/training/02_Task_Control/2_vTaskDelayUntil -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build training/02_Task_Control/2_vTaskDelayUntil
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/training/02_Task_Control/2_vTaskDelayUntil/build --config ${{env.BUILD_TYPE}}

    - name: Test training/02_Task_Control/2_vTaskDelayUntil
      working-directory: ${{github.workspace}}/training/02_Task_Control/2_vTaskDelayUntil/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -V --timeout 60

#######################################

    - name: Configure CMake training/02_Task_Control/3_xTaskDelayUntil
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/training/02_Task_Control/3_xTaskDelayUntil/build -S ${{github.workspace}}/training/02_Task_Control/3_xTaskDelayUntil -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build training/02_Task_Control/3_xTaskDelayUntil
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/training/02_Task_Control/3_xTaskDelayUntil/build --config ${{env.BUILD_TYPE}}

    - name: Test training/02_Task_Control/3_xTaskDelayUntil
      working-directory: ${{github.workspace}}/training/02_Task_Control/3_xTaskDelayUntil/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -V --timeout 60

#######################################
#######################################
#######################################

    - if: ${{ startswith(matrix.os, 'windows-') }}
      name: Configure CMake Demo_CMake/FreeRTOS_Plus_CLI_with_Trace_Simulator
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/Demo_CMake/FreeRTOS_Plus_CLI_with_Trace_Simulator/build -S ${{github.workspace}}/Demo_CMake/FreeRTOS_Plus_CLI_with_Trace_Simulator -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - if: ${{ startswith(matrix.os, 'windows-') }}
      name: Build Demo_CMake/FreeRTOS_Plus_CLI_with_Trace_Simulator
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/Demo_CMake/FreeRTOS_Plus_CLI_with_Trace_Simulator/build --config ${{env.BUILD_TYPE}}

